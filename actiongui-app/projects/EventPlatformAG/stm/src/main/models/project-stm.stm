role NONE {

  Person {

    // Users who are not logged in yet can register (create new persons), but only as free users
    create

    // When a new user registers, they only set their username and password.
    update(username) constrainedBy [self.username = null ] // and target.role = Role::FREEUSER]
    update(password) constrainedBy [self.password = null ] // and target.role = Role::FREEUSER]
    update(role) constrainedBy  [self.role = null and value = Role::FREEUSER]

    // The categories moderated by a user can be seen by everyone.
    read(moderates)


    // Additionally, users who are not logged in yet, can log in.
    // For that, they need the permission to read usernames, passwords, and roles.
    read(username) , read(password) , read(role)


  }


  Event {

    // everyone can read the private flag of an event
    read(private)

    // Everyone can read a public event’s core information and any event’s categories
    read(title) , read(description) , read(location) , read(date) , read(owner) , read(categories) constrainedBy [self.private = false]




  }
  Category {


  }

  Invite {
  
  }

  Post {

  }

}

role FREEUSER extends NONE {

  Person {

    // Users can see any other user’s core information (name, surname, username, role).
    read(name) , read(surname) , read(username) , read(role)

    // Users can edit their password, and their own core information except their role.
    update(name) , update(surname) , update(username) ,update(password) constrainedBy [ self = caller ]

    // Each user can see the events they own, manage, attend, or requested access to,
    read(events) , read(manages) , read(attends) , read(requests)
    // the posts they authored, the categories they subscribed to, and the invitations they received or sent.
    read(authored) , read(subscriptions) , read(invitations) , read(invites)

    add(invites) constrainedBy [target.event.managedBy->includes(self) or target.event.managedBy->includes(caller)]

    // TEST CASE 1 FREEUSER
    add(events) constrainedBy [target.owner = self or target.owner = null]
    remove(manages), add(manages) constrainedBy [target.owner = caller]
    add(attends)

    add(requests) constrainedBy [target.private = false]

    // Sym: Only event managers can invite users to events they manage, cancel invitations, and accept and deny requests.
    add(invitations) constrainedBy [target.event.managedBy->includes(caller)] //  and target.invitee.role <> Role::NONE
    // Sym: An invited user can accept or decline the invitation (in both cases, the invitation is deleted).
    remove(invitations) constrainedBy [(target.event.managedBy->includes(caller) and target.invitee = self) or (caller = target.invitee)] //  and target.invitee = self 
  }


  Event {

    // Users can create public events
    create
    update(private) constrainedBy [value = false]

    // For private events, only its attendants and users invited to the event can read event info 
    read(title) , read(description) , read(location) , read(date) , read(owner) , read(categories) constrainedBy [
      ((self.attendants->includes(caller) or self.invitations->exists( i | i.invitee = caller  )) and
      self.private = true) or self.private = false
      ]


    // Only managers of an event can edit the core information (except owner field) 
    update(title) , update(description) , update(location) , update(date) constrainedBy [self.managedBy->includes(caller)]
    // the exception of the owner who cannot be changed but only set initially
    update(owner) constrainedBy [ value = caller and self.owner = null ]


    // For public events, users can see who is attending them and who is managing them
    // For private events, only attendants and those who have an invitation pending can read that information
    read(managedBy) , read(attendants) constrainedBy [
      self.private = false or 
      ( self.private = true and (self.attendants->includes(caller) or self.invitations->exists( i | i.invitee = caller  )) )
      ]


    // Only the owner can promote attendants to managers and demote managers to attendants
    add(managedBy) constrainedBy [target = self.owner and caller = target or (caller = self.owner and self.attendants->includes(target)) ]
    remove(managedBy) constrainedBy [caller = self.owner and not (caller = target) and self.attendants->includes(target)]


    // Managers can remove attendants from the event, but only if the attendant is not a manager
    // Everyone besides the owner can remove themselves from attending the event
    remove(attendants) constrainedBy [ 
      (self.managedBy->includes(caller) and not self.managedBy->includes(target)) or 
      (target = caller and self.attendants->includes(caller) and not (caller = self.owner)) 
      ]

    // Managers can add those who requested to join an event as attendants
    // // Everyone can add themselves as attendant to an event, if they have been invited
    add(attendants) constrainedBy [
      target = self.owner or 
      (self.managedBy->includes(caller) and self.requesters->includes(target)) or 
      (target = caller and self.invitations->exists(i | i.invitee = caller))
      ]

    // Everyone can request to join a public event
    add(requesters) constrainedBy [ target = caller and self.private = false]
    // and cancel their requests
    // [Managers],accept and deny requests
    remove(requesters) constrainedBy [
       (target = caller and self.private = false) or 
       self.managedBy->includes(caller)
       ]


    // Only event managers can invite users to events they manage
    add(invitations) constrainedBy [ self.managedBy->includes(caller)]

    // An invited user can accept or decline the invitation 
    // [event managers] can cancel invitations
    remove(invitations) constrainedBy [
      (target.invitee = caller and self.invitations->exists(i | i.invitee = caller )) or
      (self.managedBy->includes(caller)) 
      ]

    // Managers can see all invitations and requests for the respective event
    read(invitations) , read(requesters) constrainedBy [self.managedBy->includes(caller) or self.invitations->exists(i | i.invitee = caller )] // or self.invitations->exists(i | i.invitee = caller)

    // Only attendants can see an event’s message board
    read(messageBoard) constrainedBy [ self.attendants->includes(caller) ]
    // and post to the event’s message board.
    add(messageBoard) constrainedBy [ self.attendants->includes(caller) ]
    // Managers and the authors can remove posts
    remove(messageBoard) constrainedBy [
      (self.managedBy->includes(caller) or
      target.author = caller ) and 
      target.locked = false
    ]


    // TEST 1 FREEUSER
    add(categories)

   
  }


  Category {

    // Users can see who moderates a category
    read(moderators)
    // Moderators can decide to remove themselves as the moderator of a category.
    remove(moderators) constrainedBy [caller = target]

    // Categories can be seen and their name, events and moderators can be read by everyone
    read(name) , read(events)
    // but only moderators of a category can see its subscribers.
    read(subscribers) constrainedBy [self.moderators->includes(caller)]

    // TEST 1 FREEUSER
    add(events)


  }


  Invite {

    // Invitations are read-only, i.e., once they have been assigned, the values of invitee, invitedBy, and event cannot be changed.
    create
    update(invitee) constrainedBy [ self.invitee = null ]
    update(invitedBy) constrainedBy [ self.invitee = null ]
    update(event) constrainedBy [ self.event = null ]
    read(invitee), read(invitedBy), read(event) constrainedBy [self.event.managedBy->includes(caller) or self.invitee = caller]
  }

  Post {

    create
    // Only attendants can read a post’s core information (author, content, postedAt)
    // A post’s lock, and all information of locked posts can only be read by those who can review the respective post.
    read(author) , read(content) ,read(postedAt) constrainedBy [ 
      (self.postedAt.attendants->includes(caller) and self.locked = false) or
      self.postedAt.managedBy->includes(caller) 
       ]
    
    // read(locked)

    // The author, event, and content of a post can only be set initially.
    update(author) constrainedBy [self.author = null] 
    update(content) constrainedBy [self.content = null] 
    update(postedAt) constrainedBy [self.postedAt = null] 

    // Anyone who can read a post’s content, can flag it for review
    update(flagged) constrainedBy [ 
      (self.postedAt.attendants->includes(caller) and value = true) or
      self.postedAt.managedBy->includes(caller) or
      (value = false and self.flagged = null)
      ]

    // Those who can review a post can see whether it has been flagged and read its content and author
    read(flagged) constrainedBy [self.postedAt.managedBy->includes(caller)]
    update(locked) constrainedBy [
      (self.postedAt.managedBy->includes(caller) and value = true) or 
      (value = false and self.locked = null)
      ]

    // Locked posts cannot be deleted
    delete constrainedBy [
      self.locked = false and 
      ( self.author = caller or
      self.postedAt.managedBy->includes(caller) )
      ]

  }

}

role PREMIUMUSER extends FREEUSER {

  Person {
    // premium users can subscribe to and unsubscribe from categories
    add(subscriptions) , remove(subscriptions)
   
  }


  Event {

    update(private)



  }
  Category {
    
  }
  Invite {
    
  }


}

role MODERATOR extends PREMIUMUSER{

  Person {
    
  }
  Event {

    
    
    // remove a category they moderate from an event.
    remove(categories) constrainedBy [target.moderators->includes(caller)]

    read(messageBoard) constrainedBy [ self.categories->exists(i | i.moderators->includes(caller)) ]


    
  }
  Category {
    
  }
  Invite {
    
  }

  Post {

    // For every post, they can see at which event it was posted 
    // They can access posts as if they were an attendant, review posts and
    read(postedAt) , read(author) , read(content) constrainedBy [
      self.locked = false and 
      self.postedAt.categories->exists(i | i.moderators->includes(caller) )
      ]
    // read(locked) ,
    read(flagged) , update(flagged) constrainedBy [
      self.postedAt.categories->exists(i | i.moderators->includes(caller) )
    ]
    update(locked) constrainedBy [ 
      value = true and 
      self.postedAt.categories->exists(i | i.moderators->includes(caller) )
      ]

  }

}

role ADMIN extends MODERATOR{

  Person {
    
    delete

    // Administrators can also edit any users password and role.
    update(password) , update(role)

    // Sym: They can add and remove users with the role moderator as moderators of categories.
    add(moderates), remove(moderates) constrainedBy [self.role = Role::MODERATOR]
    
  }
  Event {

    // Administrators have the same permissions as moderators, and are regarded as moderators of every category
    read(categories) , remove(categories) , add(categories)

    read(messageBoard)
  }
  Category {
    // They can create and delete categories, edit their names,
    create
    delete
    update(name)

    // They can add and remove users with the role moderator as moderators of categories.
    add(moderators), remove(moderators) constrainedBy [target.role = Role::MODERATOR]

    add(subscribers)
    add(events)
    
  }
  Invite {
    
  }

  Post {
    delete

    // Additionally, administrators can review all posts.
    read(flagged) , update(flagged) 
    read(postedAt) , read(author) , read(content)
    // read(locked) ,
    update(locked)

  }


}

// The SYSTEM role is required for test data setup
role SYSTEM {
  Person {
    fullAccess
  }
  Event {
    fullAccess
  }
  Category {
    fullAccess
  }
  Invite {
    fullAccess
  }
}
